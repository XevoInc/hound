#!/usr/bin/python3
#
# This utility does YAML schema verification. Given a schema and a YAML data
# file, it returns 0 if the data matches the schema and non-0 otherwise.
#
# Note that, although the schema is specified in YAML, we actually use
# jsonschema to do validation. This is because jsonschema is well-supported.
# Since you have to parse the document before passing it into jsonschema, any
# hierarchical JSON-like data structure works fine for representing the schema
# itself.
#

import argparse
import sys
import yaml

import formatchecker.varlen_fmt
import jsonschema

from sschema import (
    make_format_checker,
    make_resolver
)
from sschema.handler.sschema import make_default_handler


def get_arg_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'datafile',
        action='store',
        help='The YAML file to check')
    parser.add_argument(
        '-s',
        '--schema',
        action='store',
        required=True,
        help='The schema to check against')
    parser.add_argument(
        '-q',
        '--quiet',
        action='store_true',
        default=False,
        help='No output, just return 0/non-0 if the check passes/fails')

    return parser


def main():
    parser = get_arg_parser()
    args = parser.parse_args()

    with open(args.schema, 'r') as f:
        schema = yaml.safe_load(f)

    handler = make_default_handler()
    resolver = make_resolver(schema, [handler])
    format_checker = make_format_checker([formatchecker.varlen_fmt])

    with open(args.datafile, 'r') as f:
        doc_count = 0
        for doc in yaml.safe_load_all(f):
            doc_count += 1
            errors = list(jsonschema.Draft7Validator(
                              schema,
                              resolver=resolver,
                              format_checker=format_checker).iter_errors(doc))
            err_count = len(errors)
            if err_count > 0:
                ret = 1
                if not args.quiet:
                    errors.sort(key=jsonschema.exceptions.relevance)
                    print('Schema validation failed with %d errors:'
                          % err_count)
                    for error in errors:
                        print('-')
                        s = str(error).replace('\n', '\n    ')
                        print('    %s' % s)
                break
            else:
                ret = 0

    return ret


if __name__ == '__main__':
    sys.exit(main())
