---
#
# This is the "master" schema, which validates the format of the runtime
# schemas. Its purpose is to turn a runtime schema syntax error into a
# compile-time one.
#
$schema: http://json-schema.org/draft-07/schema#
title: Sensor data description
type: object
required:
  - id
  - name
  - fmt
additionalProperties: false
properties:
  id:
    description: A sensor's hound data ID, which must either match what's encoded in header files or be programatically generateable (e.g. OBD-II)
    type: integer
    minimum: 0
    maximum: 0xffffffff
  name:
    description: A sensor's friendly name, which will be advertised to consumers
    type: string
    minLength: 1
  fmt:
    type: array
    # It's useful for the parsing code to have a maximum number of entries it can
    # see.
    minItems: 1
    maxItems: 100
    # Make sure variable-length types (size 0) are specified last in the format
    # list so that they're parseable.
    format: varlen-fmt
    items:
      type: object
      additionalProperties: false
      properties:
        name:
          description: A description of the datapoint
          type: string
        unit:
          $ref: include://si-unit.yaml
        type:
          $ref: include://type.yaml
        size:
          type: integer
          minimum: 0

      required:
        - name
        - unit
        - type

      if:
        properties:
          type:
            const: bytes
      then:
        required:
          - size
      else:
        not:
          # size property must not be present, except if the type is bytes. This
          # is the strange jsonschema way to express that condition. We are
          # saying here that we must fail a schema that requires size to be
          # present. In other words, size must not be present.
          required:
            - size
